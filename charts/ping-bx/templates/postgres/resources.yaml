{{- if (merge (index .Values "postgres")).enabled }}
apiVersion: v1
data:
  K8S_STATEFUL_SET_NAME: {{ .Release.Name }}-postgres
  K8S_STATEFUL_SET_SERVICE_NAME: {{ .Release.Name }}-postgres-cluster
  POSTGRES_PASSWORD: mysecretpassword
  PGDATA: /var/lib/postgresql/data/pgdata
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ include "bx.name" . }}
    helm.sh/chart: {{ include "bx.chart" . }}
  name: {{ .Release.Name }}-postgres-env-vars
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ include "bx.name" . }}
    helm.sh/chart: {{ include "bx.chart" . }}
  name: {{ .Release.Name }}-postgres
spec:
  ports:
  - name: tcp
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ include "bx.name" . }}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ include "bx.name" . }}
    helm.sh/chart: {{ include "bx.chart" . }}
  name: {{ .Release.Name }}-postgres-cluster
spec:
  clusterIP: None
  ports:
  - name: tcp
    port: 5432
    protocol: TCP
  publishNotReadyAddresses: true
  selector:
    clusterIdentifier: {{ .Release.Name }}-postgres
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ include "bx.name" . }}postgres
    helm.sh/chart: {{ include "bx.chart" . }}
  name: {{ .Release.Name }}-postgres
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/name: {{ include "bx.name" . }}
  serviceName: {{ .Release.Name }}-postgres-cluster
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: {{ include "bx.name" . }}
        clusterIdentifier: {{ .Release.Name }}-postgres
        helm.sh/chart: {{ include "bx.chart" . }}
    spec:
      affinity: {}
      containers:
      - env: []
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-global-env-vars
            optional: true
        - configMapRef:
            name: {{ .Release.Name }}-env-vars
            optional: true
        - configMapRef:
            name: {{ .Release.Name }}-postgres-env-vars
        image: postgres:12.16
        imagePullPolicy: IfNotPresent
        lifecycle: {}
        livenessProbe:
          exec:
            command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
          failureThreshold: 4
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: postgres
        ports:
        - containerPort: 5432
          name: tcp
        readinessProbe:
          exec:
            command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
          failureThreshold: 4
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2
            memory: 3Gi
          requests:
            cpu: 0
            memory: 3Gi
        startupProbe:
          exec:
            command: ["psql", "-w", "-U", "postgres", "-d", "postgres", "-c", "SELECT 1"]
          failureThreshold: 180
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: out-dir
      initContainers: null
      nodeSelector: {}
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 9999
        runAsGroup: 9999
        runAsUser: 9031
      terminationGracePeriodSeconds: 300
      tolerations: []
      volumes:
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
{{- end -}}