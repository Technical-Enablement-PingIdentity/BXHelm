bxhealthapp:
  enabled: false
  name: bxhealthapp
  image:
    repository: gcr.io/ping-gte
    name: bxhealthapp-dev
    tag: latest
    pullPolicy: Always
    pullSecret: "gcr-pull-secret"
  privateCert:
    generate: true
  volumeMounts:
    - mountPath: /run/secrets/private-cert
      name: private-cert
  envs:
    STARTUP_COMMAND: "tail"
    STARTUP_BACKGROUND_OPTS: "-f /dev/null"
  ingress:
    host: bxhealth.ping-devops.com
    tlsSecret: bxhealth-tls
    annotations: {}
  workload:
    deployment:
      strategy:
        type: Recreate
  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 1500m
        memory: 1Gi
    probes:
      livenessProbe:
        exec:
          command:
            - echo
      readinessProbe:
        exec:
          command:
            - echo
      startupProbe:
        exec:
          command:
            - echo
  services:
    https:
      containerPort: 5000
      servicePort: 5000
      # ingressPort: 443
      dataService: true

bxretailapp:
  enabled: false
  name: bxretailapp
  image:
    repository: gcr.io/ping-gte
    name: bxretailapp-dev
    tag: latest
    pullPolicy: Always
    pullSecret: "gcr-pull-secret"
  privateCert:
    generate: true
  volumeMounts:
    - mountPath: /run/secrets/private-cert
      name: private-cert
  envs:
    STARTUP_COMMAND: "tail"
    STARTUP_BACKGROUND_OPTS: "-f /dev/null"
  ingress:
    host: bxretail.ping-devops.com
    tlsSecret: bxretail-tls
    annotations: {}
  workload:
    deployment:
      strategy:
        type: Recreate
  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 1500m
        memory: 1Gi
    probes:
      livenessProbe:
        exec:
          command:
            - echo
      readinessProbe:
        exec:
          command:
            - echo
      startupProbe:
        exec:
          command:
            - echo
  services:
    https:
      containerPort: 5000
      servicePort: 5000
      # ingressPort: 443
      dataService: true

bxfinanceapp:
  enabled: false
  name: bxfinanceapp
  image:
    repository: gcr.io/ping-gte
    name: bxfinanceapp-dev
    tag: latest
    pullPolicy: Always
    pullSecret: "gcr-pull-secret"
  privateCert:
    generate: true
  volumeMounts:
    - mountPath: /run/secrets/private-cert
      name: private-cert
  envs:
    STARTUP_COMMAND: "tail"
    STARTUP_BACKGROUND_OPTS: "-f /dev/null"
  ingress:
    host: bxfinance.ping-devops.com
    tlsSecret: bxfinance-tls
    annotations: {}
  workload:
    deployment:
      strategy:
        type: Recreate
  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 1500m
        memory: 1Gi
    probes:
      livenessProbe:
        exec:
          command:
            - echo
      readinessProbe:
        exec:
          command:
            - echo
      startupProbe:
        exec:
          command:
            - echo
  services:
    https:
      containerPort: 5000
      servicePort: 5000
      # ingressPort: 443
      dataService: true

global: {}


ping-devops:
  global: 
    ingress:
      enabled: false
      addReleaseNameToHost: prepend
      defaultDomain: ping-devops.com
      defaultTlsSecret:
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        kubernetes.io/ingress.class: "nginx-public"
  pingaccess-admin:
    enabled: false
    privateCert:
      generate: true
    container:
      waitFor:
        pingfederate-engine:
          service: https
          timeoutSeconds: 600
      resources:
        requests:
          cpu: 0
          memory: 1.5Gi
        limits:
          cpu: 1500m
          memory: 1.5Gi

  pingaccess-engine:
    enabled: false
    container:
      replicaCount: 1
      resources:
        requests:
          cpu: 0
          memory: 1.5Gi
        limits:
          cpu: 1500m
          memory: 1.5Gi
    services:
      http:
        servicePort: 8080
        containerPort: 8080
        ingressPort: 80
        dataService: true

  pingfederate-admin:
    enabled: false
    container:
      waitFor:
        pingdirectory:
          service: ldaps
          timeoutSeconds: 300
      resources:
        requests:
          cpu: 0
          memory: 1Gi
        limits:
          cpu: 2
          memory: 2Gi
  
  pingfederate-engine:
    enabled: false
    container:
      resources:
        requests:
          cpu: 0
          memory: 1Gi
        limits:
          cpu: 2
          memory: 2Gi

  pingdirectory:
    enabled: false
    container:
      replicaCount: 1
      resources:
        requests:
          cpu: 50m
          memory: 3Gi
        limits:
          cpu: 2
          memory: 3Gi
    services:
      ldap:
        servicePort: 389
        containerPort: 1389
        dataService: true
      ldaps:
        servicePort: 636
        containerPort: 1636
        dataService: true
        clusterService: true
      https:
        servicePort: 443
        containerPort: 1443
        ingressPort: 443
        dataService: true
  
  pingdataconsole:
    enabled: false
  
  pingauthorize:
    enabled: false
    container:
      waitFor:
        pingdirectory:
          service: ldaps
          timeoutSeconds: 300

  pingauthorizepap:
    enabled: false
    container:
      replicaCount: 1
      resources:
        requests:
          cpu: 50m
          memory: 1.5Gi
        limits:
          cpu: 2
          memory: 1.5Gi

# testFramework:
#   enabled: true
#   testConfigMaps:
#     files:

#   testSteps:
#     - name: 01-wait-for
#       waitFor:
#         pingdirectory:
#           service: https

#     - name: 02-get-dse
#       image: ${DEPS_REGISTRY}pingidentity/ldap-sdk-tools
#       securityContext:
#         runAsUser: 9031
#       command: ["/bin/sh"]
#       args:
#         - -c
#         - >-
#             echo "hostname: $(PD_ENGINE_PRIVATE_HOSTNAME)" &&
#             echo $(PD_ENGINE_PRIVATE_PORT_LDAPS) &&
#             /opt/tools/ldapsearch --baseDN "" --hostname $(PD_ENGINE_PRIVATE_HOSTNAME) --port $(PD_ENGINE_PRIVATE_PORT_LDAPS) --useSSL --trustAll --scope base "(&)"

#     - name: 02-postman-pd-helm-test
#       image: ${DEPS_REGISTRY}arnaudlacour/newman
#       command:
#         - newman
#         - run
#         - /var/run/pd-helm-test.postman-collection.json
#         - --environment
#         - /var/run/generated.postman-environment.json
#         - --insecure
#         - --ignore-redirects